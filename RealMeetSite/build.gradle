/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'psyken' at '14. 3. 5 오후 3:46' with Gradle 1.11
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.11/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

// JAVA Version 1.6
sourceCompatibility = 1.6;
targetCompatibility = 1.6;
// 개발한 애플리케이션 버전
version = '1.0'

// 메이븐 Central 저장소 사용
repositories {
	mavenCentral()
}

// dependency 버전 정보
def version = [
spring: '3.2.2.RELEASE'
, junit: '4.11'
, servletApi: '3.0.1'
, jstl: '1.2'
, slf4j: '1.7.6'
, mockito: '1.9.0'
, cglib: '2.2.2'
, logback: '1.0.6'
]

// In this section you declare the dependencies for your production and test code
// 의존성 설정
dependencies {
	compile 'javax.mail:mail:1.4.5',
		'javax.activation:activation:1.1.1',
		'org.springframework:spring-core:3.2.2.RELEASE',
		'org.springframework:spring-webmvc:3.2.2.RELEASE',
		'org.springframework:spring-orm:3.2.2.RELEASE',
		'org.springframework.data:spring-data-jpa:1.2.0.RELEASE',
		'org.springframework:spring-tx:3.2.2.RELEASE',
		'org.hibernate:hibernate-entitymanager:4.1.7.Final',
		'org.apache.tiles:tiles-core:2.2.2',
		'org.apache.tiles:tiles-template:2.2.2',
		'org.apache.tiles:tiles-jsp:2.2.2',
		'org.mybatis:mybatis-spring:1.3.0',
		'org.mybatis:mybatis:3.4.0',
		'javax.jms:jms:1.1',
		'javax.servlet:jstl:1.2',
		'ch.qos.logback:logback-classic:1.1.7',
		'com.hynnet:oracle-driver-ojdbc6:12.1.0.1';
		

  compile group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
  compile group: 'org.webjars.bower', name: 'jquery', version: '2.2.3'
  compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
  compile group: 'commons-io', name: 'commons-io', version: '2.4'
  
  providedCompile "javax.servlet:javax.servlet-api:${version.servletApi}"

  testCompile "org.springframework:spring-test:${version.spring}",
			  "junit:junit:${version.junit}",
			  "org.mockito:mockito-core:${version.mockito}"

  runtime "javax.servlet:jstl:${version.jstl}"
}

// logback(slf4j)를 사용하기 때문에 모든 의존성에서 commons-logging는 제외
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

// JAVA 컴파일시 인코딩 설정
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// TEST 설정
test {
	jvmArgs = ['-ea', '-Xmx256m']
	logging.captureStandardOutput(LogLevel.INFO)
	//testReport = false
	reports.html.enabled = false
}
def createDir = {
 println "create source directory: $it"
 // it.mkdirs() //유닉스용
mkdir(it) //윈도우용
}
// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: 'initialize project') << {
	createDir = {
		println "create source directory: $it"
		// it.mkdirs() //유닉스용
		mkdir(it) //윈도우용
	}
	sourceSets*.java.srcDirs*.each createDir
	sourceSets*.resources.srcDirs*.each createDir
	createDir webAppDir
	createDir new File(webAppDir, '/WEB-INF')
}
